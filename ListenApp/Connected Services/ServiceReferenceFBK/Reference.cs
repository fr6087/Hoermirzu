//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 15.0.27130.2024
// 
namespace ListenApp.ServiceReferenceFBK {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Section", Namespace="http://schemas.datacontract.org/2004/07/ClassLibrary.model")]
    public partial class Section : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<ListenApp.ServiceReferenceFBK.Element> InputsAndHeadingsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<ListenApp.ServiceReferenceFBK.Element> InputsAndHeadings {
            get {
                return this.InputsAndHeadingsField;
            }
            set {
                if ((object.ReferenceEquals(this.InputsAndHeadingsField, value) != true)) {
                    this.InputsAndHeadingsField = value;
                    this.RaisePropertyChanged("InputsAndHeadings");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Element", Namespace="http://schemas.datacontract.org/2004/07/ClassLibrary.model")]
    public partial class Element : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CommentField;
        
        private string DisabledField;
        
        private string Group_nameField;
        
        private System.Nullable<bool> IsSeclectedField;
        
        private string List_idField;
        
        private string MaxlengthField;
        
        private string PatternField;
        
        private string PlaceholderField;
        
        private string RequiredField;
        
        private string SizeField;
        
        private System.Collections.ObjectModel.ObservableCollection<ListenApp.ServiceReferenceFBK.Element> SubelemsField;
        
        private string TextField;
        
        private string TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment {
            get {
                return this.CommentField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentField, value) != true)) {
                    this.CommentField = value;
                    this.RaisePropertyChanged("Comment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Disabled {
            get {
                return this.DisabledField;
            }
            set {
                if ((object.ReferenceEquals(this.DisabledField, value) != true)) {
                    this.DisabledField = value;
                    this.RaisePropertyChanged("Disabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Group_name {
            get {
                return this.Group_nameField;
            }
            set {
                if ((object.ReferenceEquals(this.Group_nameField, value) != true)) {
                    this.Group_nameField = value;
                    this.RaisePropertyChanged("Group_name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> IsSeclected {
            get {
                return this.IsSeclectedField;
            }
            set {
                if ((this.IsSeclectedField.Equals(value) != true)) {
                    this.IsSeclectedField = value;
                    this.RaisePropertyChanged("IsSeclected");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string List_id {
            get {
                return this.List_idField;
            }
            set {
                if ((object.ReferenceEquals(this.List_idField, value) != true)) {
                    this.List_idField = value;
                    this.RaisePropertyChanged("List_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Maxlength {
            get {
                return this.MaxlengthField;
            }
            set {
                if ((object.ReferenceEquals(this.MaxlengthField, value) != true)) {
                    this.MaxlengthField = value;
                    this.RaisePropertyChanged("Maxlength");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Pattern {
            get {
                return this.PatternField;
            }
            set {
                if ((object.ReferenceEquals(this.PatternField, value) != true)) {
                    this.PatternField = value;
                    this.RaisePropertyChanged("Pattern");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Placeholder {
            get {
                return this.PlaceholderField;
            }
            set {
                if ((object.ReferenceEquals(this.PlaceholderField, value) != true)) {
                    this.PlaceholderField = value;
                    this.RaisePropertyChanged("Placeholder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Required {
            get {
                return this.RequiredField;
            }
            set {
                if ((object.ReferenceEquals(this.RequiredField, value) != true)) {
                    this.RequiredField = value;
                    this.RaisePropertyChanged("Required");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Size {
            get {
                return this.SizeField;
            }
            set {
                if ((object.ReferenceEquals(this.SizeField, value) != true)) {
                    this.SizeField = value;
                    this.RaisePropertyChanged("Size");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<ListenApp.ServiceReferenceFBK.Element> Subelems {
            get {
                return this.SubelemsField;
            }
            set {
                if ((object.ReferenceEquals(this.SubelemsField, value) != true)) {
                    this.SubelemsField = value;
                    this.RaisePropertyChanged("Subelems");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferenceFBK.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/JsonForBot", ReplyAction="http://tempuri.org/IService1/JsonForBotResponse")]
        System.Threading.Tasks.Task<string> JsonForBotAsync(string username, string password, short sectionindex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TalkToTheBot", ReplyAction="http://tempuri.org/IService1/TalkToTheBotResponse")]
        System.Threading.Tasks.Task<string> TalkToTheBotAsync(string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSpecificElements", ReplyAction="http://tempuri.org/IService1/GetSpecificElementsResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<string>> GetSpecificElementsAsync(string username, string password, string xpath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetForm", ReplyAction="http://tempuri.org/IService1/GetFormResponse")]
        System.Threading.Tasks.Task<string> GetFormAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllElements", ReplyAction="http://tempuri.org/IService1/GetAllElementsResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ListenApp.ServiceReferenceFBK.Section>> GetAllElementsAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Login", ReplyAction="http://tempuri.org/IService1/LoginResponse")]
        System.Threading.Tasks.Task<string> LoginAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCSVDropdownString", ReplyAction="http://tempuri.org/IService1/GetCSVDropdownStringResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<string>> GetCSVDropdownStringAsync(string list_id, string filter);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : ListenApp.ServiceReferenceFBK.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<ListenApp.ServiceReferenceFBK.IService1>, ListenApp.ServiceReferenceFBK.IService1 {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public Service1Client() : 
                base(Service1Client.GetDefaultBinding(), Service1Client.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IService1.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Service1Client(EndpointConfiguration endpointConfiguration) : 
                base(Service1Client.GetBindingForEndpoint(endpointConfiguration), Service1Client.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Service1Client(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(Service1Client.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Service1Client(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(Service1Client.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<string> JsonForBotAsync(string username, string password, short sectionindex) {
            return base.Channel.JsonForBotAsync(username, password, sectionindex);
        }
        
        public System.Threading.Tasks.Task<string> TalkToTheBotAsync(string message) {
            return base.Channel.TalkToTheBotAsync(message);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<string>> GetSpecificElementsAsync(string username, string password, string xpath) {
            return base.Channel.GetSpecificElementsAsync(username, password, xpath);
        }
        
        public System.Threading.Tasks.Task<string> GetFormAsync(string username, string password) {
            return base.Channel.GetFormAsync(username, password);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ListenApp.ServiceReferenceFBK.Section>> GetAllElementsAsync(string username, string password) {
            return base.Channel.GetAllElementsAsync(username, password);
        }
        
        public System.Threading.Tasks.Task<string> LoginAsync(string username, string password) {
            return base.Channel.LoginAsync(username, password);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<string>> GetCSVDropdownStringAsync(string list_id, string filter) {
            return base.Channel.GetCSVDropdownStringAsync(list_id, filter);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService1)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService1)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:59964/Service1.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return Service1Client.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IService1);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return Service1Client.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IService1);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IService1,
        }
    }
}
