<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BackButton.Content" xml:space="preserve">
    <value>z powrotem</value>
  </data>
  <data name="Close" xml:space="preserve">
    <value>blisko</value>
  </data>
  <data name="DisambiguateField" xml:space="preserve">
    <value>Które pole miałeś na myśli?</value>
  </data>
  <data name="FoundNoPageToEdit" xml:space="preserve">
    <value>Przepraszam. Nie masz pola {*}</value>
  </data>
  <data name="HelpClarify" xml:space="preserve">
    <value>Nie jestem pewien, co masz na myśli. Intencje Wiem, że możesz pokazać, kiedy mówisz "pomoc".</value>
  </data>
  <data name="HelpHint" xml:space="preserve">
    <value>Możesz powiedzieć: Moje [nazwa pola] to [wartość pola] np. "Moja firma to innobis". Jeśli chcesz kontynuować "go next" lub wróć: "go back". Jeśli następny element jest rozwijany, użyj "select 1", aby wybrać pierwszy wpis. W przypadku przycisków radiowych i pól wyboru należy zamiast tego użyć opcji "next select / unselect".</value>
  </data>
  <data name="HomeButton.Content" xml:space="preserve">
    <value>uratować</value>
  </data>
  <data name="InputText.PlaceholderText" xml:space="preserve">
    <value>Powiedz coś lub powiedz "słuchanie"</value>
  </data>
  <data name="LaunchingListenToMe" xml:space="preserve">
    <value>Uruchom ListenToMe</value>
  </data>
  <data name="LoadingFieldToEdit" xml:space="preserve">
    <value>Szukam pola {0}</value>
  </data>
  <data name="loginButton.Content" xml:space="preserve">
    <value>zarejestrować</value>
  </data>
  <data name="mandatoryField" xml:space="preserve">
    <value>Błąd. Wymagane pola.</value>
  </data>
  <data name="min1digit" xml:space="preserve">
    <value>Błąd. Wpisz co najmniej 1 numer.</value>
  </data>
  <data name="NextButton.Content" xml:space="preserve">
    <value>więcej</value>
  </data>
  <data name="nextField" xml:space="preserve">
    <value>następny</value>
  </data>
  <data name="no" xml:space="preserve">
    <value>nie</value>
  </data>
  <data name="Password.Header" xml:space="preserve">
    <value>hasło</value>
  </data>
  <data name="PermissionInvalid" xml:space="preserve">
    <value>Nadal musisz przyznać rozpoznawanie głosu na swoim urządzeniu.</value>
  </data>
  <data name="PluralFields" xml:space="preserve">
    <value>znaleziono wiele pól w następujących sekcjach:</value>
  </data>
  <data name="Processing" xml:space="preserve">
    <value>Twój formularz zostanie utworzony. Poinformuję cię o zmianach statusu.</value>
    <comment>used in LuisDialogs serializable subclass xyzForm</comment>
  </data>
  <data name="SingularUpcomingField" xml:space="preserve">
    <value>Oto informacje o twojej dziedzinie</value>
  </data>
  <data name="Speaking" xml:space="preserve">
    <value>Wprowadzanie głosowe ...</value>
  </data>
  <data name="SpeechConfirmationStopListen" xml:space="preserve">
    <value>Jesteś pewien, że nie powinienem już ciebie słuchać?</value>
    <comment>"Are you sure you want me to stop listening?"</comment>
  </data>
  <data name="SpeechOptions" xml:space="preserve">
    <value>Tak / Nie</value>
    <comment>"Yes/No"</comment>
  </data>
  <data name="SpeechTypeOrSayPrompt" xml:space="preserve">
    <value>Wpisz coś lub powiedz "Słuchaj"</value>
    <comment>"Type something or say 'Start Listening'"</comment>
  </data>
  <data name="start" xml:space="preserve">
    <value>tworzyć</value>
    <comment>"start"</comment>
  </data>
  <data name="StartListening" xml:space="preserve">
    <value>Posłuchaj</value>
    <comment>"Start Listening"</comment>
  </data>
  <data name="StopListening" xml:space="preserve">
    <value>przestań słuchać</value>
    <comment>"stop listening"</comment>
  </data>
  <data name="txtElement.Text" xml:space="preserve">
    <value>Element:</value>
  </data>
  <data name="txtSection.Text" xml:space="preserve">
    <value>sekcja:</value>
  </data>
  <data name="Username.Header" xml:space="preserve">
    <value>nazwa użytkownika</value>
  </data>
  <data name="WelcomeMessage" xml:space="preserve">
    <value>Witamy w Twojej aplikacji pomocy językowej.</value>
  </data>
  <data name="yes" xml:space="preserve">
    <value>tak</value>
  </data>
</root>